{"ast":null,"code":"var _jsxFileName = \"/home/hamish/code/beenzino48/dotfiles/01-starting-setup/src/components/Chart/Chart.js\";\nimport React from \"react\";\nimport ChartBar from \"./ChartBar\";\nimport \"./Chart.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Chart = props => {\n  // return an array of the numbers from the data points\n  const dataPointValues = props.dataPoint.map()(dataPoint => dataPoint.value); // returns the max number from the array of dataPointValues\n\n  const totalMaximum = Math.max(...dataPointValues);\n  let barFillHeight = \"0%\";\n\n  if (props.max > 0) {\n    // returns percentage this bar should be filled out of 100\n    barFillHeight = Math.round(props.value / props.maxValue * 100) + \"%\";\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chart\",\n    children: props.dataPoints.map(dataPoint => /*#__PURE__*/_jsxDEV(ChartBar, {\n      value: dataPoint.value,\n      maxValue: totalMaximum,\n      label: dataPoint.label\n    }, dataPoint.label, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Chart;\nexport default Chart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"names":["React","ChartBar","Chart","props","dataPointValues","dataPoint","map","value","totalMaximum","Math","max","barFillHeight","round","maxValue","dataPoints","label"],"sources":["/home/hamish/code/beenzino48/dotfiles/01-starting-setup/src/components/Chart/Chart.js"],"sourcesContent":["import React from \"react\";\n\nimport ChartBar from \"./ChartBar\";\nimport \"./Chart.css\";\n\nconst Chart = (props) => {\n  // return an array of the numbers from the data points\n  const dataPointValues = props.dataPoint.map()((dataPoint) => dataPoint.value);\n  // returns the max number from the array of dataPointValues\n  const totalMaximum = Math.max(...dataPointValues);\n  let barFillHeight = \"0%\";\n\n  if (props.max > 0) {\n    // returns percentage this bar should be filled out of 100\n    barFillHeight = Math.round((props.value / props.maxValue) * 100) + \"%\";\n  }\n  return (\n    <div className=\"chart\">\n      {props.dataPoints.map((dataPoint) => (\n        <ChartBar\n          key={dataPoint.label}\n          value={dataPoint.value}\n          maxValue={totalMaximum}\n          label={dataPoint.label}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default Chart;\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAO,aAAP;;;AAEA,MAAMC,KAAK,GAAIC,KAAD,IAAW;EACvB;EACA,MAAMC,eAAe,GAAGD,KAAK,CAACE,SAAN,CAAgBC,GAAhB,GAAuBD,SAAD,IAAeA,SAAS,CAACE,KAA/C,CAAxB,CAFuB,CAGvB;;EACA,MAAMC,YAAY,GAAGC,IAAI,CAACC,GAAL,CAAS,GAAGN,eAAZ,CAArB;EACA,IAAIO,aAAa,GAAG,IAApB;;EAEA,IAAIR,KAAK,CAACO,GAAN,GAAY,CAAhB,EAAmB;IACjB;IACAC,aAAa,GAAGF,IAAI,CAACG,KAAL,CAAYT,KAAK,CAACI,KAAN,GAAcJ,KAAK,CAACU,QAArB,GAAiC,GAA5C,IAAmD,GAAnE;EACD;;EACD,oBACE;IAAK,SAAS,EAAC,OAAf;IAAA,UACGV,KAAK,CAACW,UAAN,CAAiBR,GAAjB,CAAsBD,SAAD,iBACpB,QAAC,QAAD;MAEE,KAAK,EAAEA,SAAS,CAACE,KAFnB;MAGE,QAAQ,EAAEC,YAHZ;MAIE,KAAK,EAAEH,SAAS,CAACU;IAJnB,GACOV,SAAS,CAACU,KADjB;MAAA;MAAA;MAAA;IAAA,QADD;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAYD,CAvBD;;KAAMb,K;AAyBN,eAAeA,KAAf"},"metadata":{},"sourceType":"module"}